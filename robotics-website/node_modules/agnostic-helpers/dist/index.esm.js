const usePagination = ({ offset = 2 }) => {
  const getPaddedArray = (filtered, shouldIncludeLeftDots, shouldIncludeRightDots, totalCount) => {
    if (shouldIncludeLeftDots) {
      filtered.unshift("...");
    }
    if (shouldIncludeRightDots) {
      filtered.push("...");
    }
    if (totalCount <= 1) {
      return [1];
    }
    return [1, ...filtered, totalCount];
  };
  const generatePagingPaddedByOne = (current, totalPageCount) => {
    const center = [current - 1, current, current + 1];
    const filteredCenter = center.filter((p) => p > 1 && p < totalPageCount);
    const includeLeftDots = current > 3;
    const includeRightDots = current < totalPageCount - 2;
    return getPaddedArray(filteredCenter, includeLeftDots, includeRightDots, totalPageCount);
  };
  const generatePagingPaddedByTwo = (current, totalPageCount) => {
    const center = [current - 2, current - 1, current, current + 1, current + 2];
    const filteredCenter = center.filter((p) => p > 1 && p < totalPageCount);
    const includeThreeLeft = current === 5;
    const includeThreeRight = current === totalPageCount - 4;
    const includeLeftDots = current > 5;
    const includeRightDots = current < totalPageCount - 4;
    if (includeThreeLeft) {
      filteredCenter.unshift(2);
    }
    if (includeThreeRight) {
      filteredCenter.push(totalPageCount - 1);
    }
    return getPaddedArray(filteredCenter, includeLeftDots, includeRightDots, totalPageCount);
  };
  const generate = (current, totalPageCount) => {
    if (offset === 1) {
      const generatedPages2 = generatePagingPaddedByOne(current, totalPageCount);
      return generatedPages2;
    }
    const generatedPages = generatePagingPaddedByTwo(current, totalPageCount);
    return generatedPages;
  };
  return {
    generate
  };
};
export { usePagination };
